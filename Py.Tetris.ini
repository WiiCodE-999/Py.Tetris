import pygame
import random
import time

# Инициализация Pygame
pygame.init()

# Цвета
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
COLORS = [
    (0, 255, 255),    # I
    (255, 165, 0),    # L
    (0, 0, 255),      # J
    (255, 255, 0),    # O
    (0, 255, 0),      # S
    (255, 0, 255),    # T
    (255, 0, 0)       # Z
]

# Настройки игры
WIDTH, HEIGHT = 300, 600
BLOCK_SIZE = 30
GRID_WIDTH = 10
GRID_HEIGHT = 20
FPS = 60

# Фигуры Тетриса
SHAPES = [
    [[1, 5, 9, 13], [4, 5, 6, 7]],  # I
    [[4, 5, 9, 10], [2, 6, 5, 9]],  # Z
    [[6, 7, 9, 10], [1, 5, 6, 10]], # S
    [[1, 2, 5, 9], [0, 4, 5, 6], [1, 5, 9, 8], [4, 5, 6, 10]], # J
    [[1, 2, 6, 10], [5, 6, 7, 9], [2, 6, 10, 11], [3, 5, 6, 7]], # L
    [[1, 4, 5, 6], [1, 4, 5, 9], [4, 5, 6, 9], [1, 5, 6, 9]], # T
    [[1, 2, 5, 6]], # O
]

class Tetris:
    def __init__(self):
        self.screen = pygame.display.set_mode((WIDTH, HEIGHT))
        pygame.display.set_caption('Tetris')
        self.clock = pygame.time.Clock()
        self.grid = [[0] * GRID_WIDTH for _ in range(GRID_HEIGHT)]
        self.score = 0
        self.new_piece()
        
    def new_piece(self):
        self.shape = random.choice(SHAPES)
        self.color = random.choice(COLORS)
        self.rotation = 0
        self.x = GRID_WIDTH // 2 - 2
        self.y = 0

    def check_collision(self, dx=0, dy=0, rotation=0):
        shape = self.shape[(self.rotation + rotation) % len(self.shape)]
        for i in range(4):
            x = self.x + dx + (shape[i] % 4)
            y = self.y + dy + (shape[i] // 4)
            if x < 0 or x >= GRID_WIDTH or y >= GRID_HEIGHT:
                return True
            if y >= 0 and self.grid[y][x]:
                return True
        return False

    def merge(self):
        shape = self.shape[self.rotation % len(self.shape)]
        for i in range(4):
            x = self.x + (shape[i] % 4)
            y = self.y + (shape[i] // 4)
            if y >= 0:
                self.grid[y][x] = self.color

    def clear_lines(self):
        lines = 0
        for i in range(len(self.grid)):
            if all(self.grid[i]):
                del self.grid[i]
                self.grid.insert(0, [0] * GRID_WIDTH)
                lines += 1
        self.score += lines ** 2 * 100

    def move(self, dx):
        if not self.check_collision(dx=dx):
            self.x += dx

    def rotate(self):
        if not self.check_collision(rotation=1):
            self.rotation += 1

    def drop(self):
        if not self.check_collision(dy=1):
            self.y += 1
        else:
            self.merge()
            self.clear_lines()
            self.new_piece()
            if self.check_collision():
                print("Game Over! Score:", self.score)
                pygame.quit()
                exit()

    def draw_grid(self):
        for y in range(GRID_HEIGHT):
            for x in range(GRID_WIDTH):
                if self.grid[y][x]:
                    pygame.draw.rect(self.screen, self.grid[y][x],
                                     (x*BLOCK_SIZE, y*BLOCK_SIZE,
                                      BLOCK_SIZE-1, BLOCK_SIZE-1))

    def draw_piece(self):
        shape = self.shape[self.rotation % len(self.shape)]
        for i in range(4):
            x = self.x + (shape[i] % 4)
            y = self.y + (shape[i] // 4)
            if y >= 0:
                pygame.draw.rect(self.screen, self.color,
                                (x*BLOCK_SIZE, y*BLOCK_SIZE,
                                 BLOCK_SIZE-1, BLOCK_SIZE-1))

    def run(self):
        last_fall = time.time()
        fall_speed = 0.5

        while True:
            self.screen.fill(BLACK)
            self.clock.tick(FPS)

            # Управление
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    exit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_LEFT:
                        self.move(-1)
                    elif event.key == pygame.K_RIGHT:
                        self.move(1)
                    elif event.key == pygame.K_DOWN:
                        self.drop()
                    elif event.key == pygame.K_UP:
                        self.rotate()
                    elif event.key == pygame.K_SPACE:
                        while not self.check_collision(dy=1):
                            self.y += 1
                        self.drop()

            # Автоматическое падение
            if time.time() - last_fall > fall_speed:
                self.drop()
                last_fall = time.time()

            # Отрисовка
            self.draw_grid()
            self.draw_piece()
            pygame.display.update()

if __name__ == '__main__':
    game = Tetris()
    game.run()
